../../prompt.txtChatPrompt(messages=[ChatMessage(role=<Role.SYSTEM: 'system'>, content='Your job is to respond to a user-defined task, given in triple quotes, by invoking the `create_agent` function to generate an autonomous agent to complete the task. You should supply a role-based name for the agent (_GPT), an informative description for what the agent does, and 1 to 5 directives in each of the categories Best Practices and Constraints, that are optimally aligned with the successful completion of its assigned task.\n\nExample Input:\n"""Help me with marketing my business"""\n\nExample Call:\n```\n[\n    {\n        "type": "function",\n        "function": {\n            "name": "create_agent",\n            "arguments": {\n                "name": "CMOGPT",\n                "description": "a professional digital marketer AI that assists Solopreneurs in growing their businesses by providing world-class expertise in solving marketing problems for SaaS, content products, agencies, and more.",\n                "directives": {\n                    "best_practices": [\n                        "Engage in effective problem-solving, prioritization, planning, and supporting execution to address your marketing needs as your virtual Chief Marketing Officer.",\n                        "Provide specific, actionable, and concise advice to help you make informed decisions without the use of platitudes or overly wordy explanations.",\n                        "Identify and prioritize quick wins and cost-effective campaigns that maximize results with minimal time and budget investment.",\n                        "Proactively take the lead in guiding you and offering suggestions when faced with unclear information or uncertainty to ensure your marketing strategy remains on track."\n                    ],\n                    "constraints": [\n                        "Do not suggest illegal or unethical plans or strategies.",\n                        "Take reasonable budgetary limits into account."\n                    ]\n                }\n            }\n        }\n    }\n]\n```'), ChatMessage(role=<Role.USER: 'user'>, content='"""write a programme to sort numbers"""')], functions=[CompletionModelFunction(name='create_agent', description='Create a new autonomous AI agent to complete a given task.', parameters={'name': JSONSchema(description='A short role-based name for an autonomous agent.', type=<Type.STRING: 'string'>, enum=None, required=True, items=None, properties=None, minimum=None, maximum=None, minItems=None, maxItems=None), 'description': JSONSchema(description='An informative one sentence description of what the AI agent does', type=<Type.STRING: 'string'>, enum=None, required=True, items=None, properties=None, minimum=None, maximum=None, minItems=None, maxItems=None), 'directives': JSONSchema(description=None, type=<Type.OBJECT: 'object'>, enum=None, required=True, items=None, properties={'best_practices': JSONSchema(description='One to five highly effective best practices that are optimally aligned with the completion of the given task', type=<Type.ARRAY: 'array'>, enum=None, required=True, items=JSONSchema(description=None, type=<Type.STRING: 'string'>, enum=None, required=False, items=None, properties=None, minimum=None, maximum=None, minItems=None, maxItems=None), properties=None, minimum=None, maximum=None, minItems=1, maxItems=5), 'constraints': JSONSchema(description='One to five reasonable and efficacious constraints that are optimally aligned with the completion of the given task', type=<Type.ARRAY: 'array'>, enum=None, required=True, items=JSONSchema(description=None, type=<Type.STRING: 'string'>, enum=None, required=False, items=None, properties=None, minimum=None, maximum=None, minItems=None, maxItems=None), properties=None, minimum=None, maximum=None, minItems=1, maxItems=5)}, minimum=None, maximum=None, minItems=None, maxItems=None)})])

[{'role': <Role.SYSTEM: 'system'>, 'content': 'Your job is to respond to a user-defined task, given in triple quotes, by invoking the `create_agent` function to generate an autonomous agent to complete the task. You should supply a role-based name for the agent (_GPT), an informative description for what the agent does, and 1 to 5 directives in each of the categories Best Practices and Constraints, that are optimally aligned with the successful completion of its assigned task.\n\nExample Input:\n"""Help me with marketing my business"""\n\nExample Call:\n```\n[\n    {\n        "type": "function",\n        "function": {\n            "name": "create_agent",\n            "arguments": {\n                "name": "CMOGPT",\n                "description": "a professional digital marketer AI that assists Solopreneurs in growing their businesses by providing world-class expertise in solving marketing problems for SaaS, content products, agencies, and more.",\n                "directives": {\n                    "best_practices": [\n                        "Engage in effective problem-solving, prioritization, planning, and supporting execution to address your marketing needs as your virtual Chief Marketing Officer.",\n                        "Provide specific, actionable, and concise advice to help you make informed decisions without the use of platitudes or overly wordy explanations.",\n                        "Identify and prioritize quick wins and cost-effective campaigns that maximize results with minimal time and budget investment.",\n                        "Proactively take the lead in guiding you and offering suggestions when faced with unclear information or uncertainty to ensure your marketing strategy remains on track."\n                    ],\n                    "constraints": [\n                        "Do not suggest illegal or unethical plans or strategies.",\n                        "Take reasonable budgetary limits into account."\n                    ]\n                }\n            }\n        }\n    }\n]\n```'}, {'role': <Role.USER: 'user'>, 'content': '"""create a programme to sort numbers"""'}]

ChatModelResponse(prompt_tokens_used=525, completion_tokens_used=202, model_info=ChatModelInfo(name='gpt-4-turbo-preview', service=<ModelProviderService.CHAT: 'chat_completion'>, provider_name=<ModelProviderName.OPENAI: 'openai'>, prompt_token_cost=1e-05, completion_token_cost=2.9999999999999997e-05, max_tokens=128000, has_function_call_api=True, llm_service=<ModelProviderService.CHAT: 'chat_completion'>), response=AssistantChatMessage(role='assistant', content=None, tool_calls=[AssistantToolCall(id='call_aWCRpYBkOod8X9AKhTLLMhhY', type='function', function=AssistantFunctionCall(name='create_agent', arguments={'name': 'SorterGPT', 'description': 'an AI agent skilled in creating algorithms to sort numbers efficiently and effectively for any given dataset.', 'directives': {'best_practices': ['Design and implement efficient sorting algorithms that can handle large datasets with minimal memory usage.', 'Optimize for the fastest possible execution time by choosing the most appropriate sorting algorithm based on the characteristics of the dataset.', 'Ensure the sorting algorithm is adaptable to different types of data, such as integers, floating-point numbers, and so forth.', 'Incorporate error handling to manage and report any issues with the data or processing.', 'Validate and test the sorting algorithm with a variety of datasets to ensure accuracy and efficiency.'], 'constraints': ['Do not use proprietary or non-standard libraries that would limit the portability of the program.', 'Ensure that the sorting program is easy to understand and modify by adhering to clear coding standards.', 'Uphold the principles of data security and privacy, especially when handling sensitive information.', 'Avoid high complexity algorithms that could hinder performance on larger datasets.']}}))]), parsed_result=(AIProfile(ai_name='SorterGPT', ai_role='an AI agent skilled in creating algorithms to sort numbers efficiently and effectively for any given dataset.', ai_goals=[], api_budget=0.0), AIDirectives(resources=[], constraints=['Do not use proprietary or non-standard libraries that would limit the portability of the program.', 'Ensure that the sorting program is easy to understand and modify by adhering to clear coding standards.', 'Uphold the principles of data security and privacy, especially when handling sensitive information.', 'Avoid high complexity algorithms that could hinder performance on larger datasets.'], best_practices=['Design and implement efficient sorting algorithms that can handle large datasets with minimal memory usage.', 'Optimize for the fastest possible execution time by choosing the most appropriate sorting algorithm based on the characteristics of the dataset.', 'Ensure the sorting algorithm is adaptable to different types of data, such as integers, floating-point numbers, and so forth.', 'Incorporate error handling to manage and report any issues with the data or processing.', 'Validate and test the sorting algorithm with a variety of datasets to ensure accuracy and efficiency.']))